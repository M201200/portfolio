---
import "@fontsource/merriweather/700.css"
import "@fontsource/merriweather/900.css"

import menu from "./../images/hamburger-menu.svg"
import lightTheme from "./../images/sun.svg"
import darkTheme from "./../images/moon.svg"

import { Image } from "astro:assets"

type Props = {
  locale: Locale
}

const { locale } = Astro.props

const prefix = locale === "ro" ? "/ro/" : locale == "ru" ? "/ru/" : "/"

const name =
  locale === "ro" ? "Vlad Iujev" : locale == "ru" ? "Влад Южев" : "Vlad Yuzhev"
const main =
  locale === "ro" ? "Principală" : locale == "ru" ? "Главная" : "Main"
const contacts =
  locale === "ro" ? "Contacte" : locale == "ru" ? "Контакты" : "Contacts"
---

<header>
  <a class="name" href={`${prefix}`}>{name}</a>
  <div id="menu-wrapper" data-expanded="false">
    <button id="menu-button"><img src={menu.src} alt="Menu" /> </button>
    <ul>
      <li><a href={`${prefix}`}>{main}</a></li>
      <li><a href={`${prefix}contacts`}>{contacts}</a></li>
      <li class="preferences">
        <select
          name="locale"
          id="locale"
          data-switcher="locale"
          class="locale-select"
        >
          <option selected={locale === "en"} value="/">ENG</option>
          <option selected={locale === "ro"} value="/ro">ROM</option>
          <option selected={locale === "ru"} value="/ru">RUS</option>
        </select>
        <button data-switcher="theme" class="theme-button">
          <Image
            class="theme-image"
            data-light={lightTheme.src}
            data-dark={darkTheme.src}
            src={darkTheme}
            alt="Theme"
          />
        </button>
      </li>
    </ul>
  </div>

  <style lang="scss">
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--gap-xl);
      min-height: 6.5rem;

      position: fixed;
      z-index: 100;

      top: 0;
      width: 100%;

      background-color: var(--bg);
      box-shadow: var(--shadow-1);

      color: var(--text-primary);

      div {
        justify-self: end;
        display: grid;
        justify-content: end;

        #menu-button {
          justify-self: end;

          width: 2.5rem;
          aspect-ratio: 1;
          padding: 0;
          border-radius: 5px;
          border: none;
          background: transparent;
          color: var(--text-primary);

          cursor: pointer;

          @media screen and (min-width: 1024px) {
            display: none;
          }
        }

        ul {
          display: flex;
          gap: var(--gap-xl);

          align-items: center;

          transition: transform 150ms ease-in;

          @media screen and (max-width: 1024px) {
            overflow: hidden;

            flex-direction: column;
            align-items: end;

            padding: var(--gap-xl);

            position: absolute;
            top: 7rem;
            right: 3rem;
            background-color: var(--bg);
            box-shadow: var(--shadow-1);
            border-radius: 5px;

            transform: translateX(150%);
          }
        }

        @media screen and (max-width: 1024px) {
          &[data-expanded="true"] {
            ul {
              transform: translateX(12%);
            }
          }
        }
        @media screen and (min-width: 1024px) {
          ul {
            display: flex;
          }
        }
      }

      @media screen and (min-width: 1024px) {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    a {
      font-size: var(--font-size-3);
      font-weight: var(--font-weight-9);
      letter-spacing: var(--font-letterspacing-1);
      font-family: "Merriweather", serif;
      padding: 0.5rem;

      text-transform: uppercase;
    }

    .preferences {
      display: flex;
      gap: var(--gap-m);
      align-content: center;
      .theme-button {
        width: var(--size-7);
        aspect-ratio: 1;

        border: none;
        background-color: transparent;
        padding: 0;

        color: var(--text-primary);

        cursor: pointer;
      }

      .locale-select {
        border: none;
        background-color: transparent;
        padding: 0.25rem;

        color: var(--text-primary);
        font-weight: 500;
        font-size: var(--font-size-3);
        font-family: "Merriweather", serif;

        cursor: pointer;
      }
    }

    html[data-theme="dark"] #menu-button,
    html[data-theme="dark"] .theme-button {
      filter: invert(100%);
    }
  </style>

  <script>
    import applyTheme from "../utils/applyTheme"
    import isDescendant from "../utils/isDescendant"
    import { navigate } from "astro:transitions/client"

    // document.addEventListener("astro:page-load", () => {
    const menuButton = document.querySelector(
      "#menu-button"
    ) as HTMLButtonElement
    const menuWrapper = document.querySelector("#menu-wrapper")

    menuButton.addEventListener("click", () => {
      menuWrapper?.setAttribute(
        "data-expanded",
        menuWrapper.getAttribute("data-expanded") === "false" ? "true" : "false"
      )
    })

    document.body.addEventListener("click", (event: MouseEvent) => {
      if (!isDescendant(menuWrapper, event.target as Node)) {
        menuWrapper?.setAttribute("data-expanded", "false")
      }
    })

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const themeButton = document.querySelector(
      '[data-switcher="theme"]'
    ) as HTMLButtonElement
    const themeImage = document.querySelector(
      ".theme-image"
    ) as HTMLImageElement

    const root = document.documentElement

    const lightImage = themeImage.dataset.light!
    const darkImage = themeImage.dataset.dark!

    themeImage.src = root.dataset.theme === "dark" ? lightImage : darkImage
    themeButton.addEventListener("click", () => {
      themeImage.src = root.dataset.theme === "dark" ? darkImage : lightImage
      applyTheme(root.dataset.theme === "light" ? "dark" : "light")
    })

    //////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////

    const localeSelect = document.querySelector(
      '[data-switcher="locale"]'
    ) as HTMLSelectElement

    localeSelect.addEventListener("change", (e) => {
      const target = e.target as HTMLSelectElement
      navigate(target.value)
    })
    // })
  </script>
</header>
