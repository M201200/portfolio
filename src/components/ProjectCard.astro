---
import { Image } from "astro:assets"

import "@fontsource/roboto/500.css"
import "@fontsource/roboto/900.css"

type Props = {
  title: string
  images?: {
    dark: ImageMetadata
    light: ImageMetadata
  }
  imageDefault: ImageMetadata
  pageLink: string
  siteLink: string
  githubLink: string
  tech: {
    name: string
    image: ImageMetadata
    url: string
  }[]
  description: string
  flip?: boolean
  locale: Locale
}

const {
  title,
  images,
  pageLink,
  siteLink,
  githubLink,
  tech,
  description,
  flip,
  locale,
  imageDefault,
} = Astro.props

const imageDark = images?.dark.src
const imageLight = images?.light.src

const liveLink =
  locale === "ro"
    ? "Link direct"
    : locale === "ru"
      ? "Прямая ссылка"
      : "Live link"
const gitHubLink =
  locale === "ro"
    ? "Depo de cod GitHub"
    : locale === "ru"
      ? "Репо на GitHub"
      : "Github repo"
const moreDetails =
  locale === "ro"
    ? "Mai multe detalii"
    : locale === "ru"
      ? "Подробнее"
      : "More details"
---

<div class="card">
  <a href={pageLink} title={title}>
    <Image
      class:list={["card_image", { right: flip }]}
      transition:name={`${title}-image`}
      src={imageDefault}
      alt={title}
      data-dark={imageDark}
      data-light={imageLight}
    />
  </a>
  <div class:list={[{ left: flip }]}>
    <h2 transition:name={`${title}-logo`}>
      {title}
    </h2>
    <ul transition:name={`${title}-tech`}>
      {
        tech.map((item) => (
          <li>
            <a href={item.url} title={item.name} target="_blank">
              <Image src={item.image} alt={item.name} loading="lazy" />
              <p>{item.name}</p>
            </a>
          </li>
        ))
      }
    </ul>
    <div class="links" transition:name={`${title}-links`}>
      <a href={siteLink}> &#10095;&#10095; {liveLink}</a>
      <a href={githubLink}> &#10095;&#10095; {gitHubLink}</a>
    </div>
    <p transition:name={`${title}-description`}>
      {description}
      <a href={pageLink}> &#10095;&#10095; {moreDetails}</a>
    </p>
  </div>
</div>

<style lang="scss">
  .card {
    padding: 1rem;
    display: grid;
    gap: var(--gap-xxl);
    font-family: Roboto, sans-serif;

    &_image {
      border-radius: 1rem;
      box-shadow: var(--shadow-2);
      width: 100%;

      transition: scale 300ms;
      &:hover {
        scale: 1.05;
      }
    }

    div {
      display: grid;
      align-content: start;
      gap: var(--gap-l);
    }
    h2 {
      font-size: var(--font-size-fluid-2);
      font-weight: var(--font-weight-9);
      line-height: var(--font-lineheight-0);
      margin-bottom: var(--gap-xs);

      padding-left: 1rem;

      text-transform: uppercase;
    }
    .links {
      display: flex;
      gap: var(--gap-l);
      margin-bottom: var(--gap-xl);

      a {
        padding: 1em;
        min-width: 9rem;

        text-align: center;

        border: solid 1px var(--bg-button);
        border-radius: 0.5rem;

        box-shadow: var(--shadow-2);

        transition:
          color 200ms,
          scale 150ms;
        &:hover {
          color: var(--text-secondary);
        }

        &:active {
          scale: 0.95;
        }
      }
    }

    ul {
      display: flex;
      flex-wrap: wrap;
      gap: var(--gap-xs) var(--gap-s);

      li {
        display: grid;
        justify-items: center;
        a {
          display: grid;
          justify-items: center;

          gap: var(--gap-s);

          padding: 0.25rem;
          aspect-ratio: 1;

          border-radius: 5px;

          transition: box-shadow 150ms;
          img {
            width: var(--size-fluid-3);
            aspect-ratio: 1;
          }

          p {
            font-size: var(--font-size-0);
            font-weight: var(--font-weight-4);
            padding: 0;
          }

          &:hover {
            box-shadow: var(--shadow-2);
          }
        }
      }
    }

    p {
      font-size: var(--font-size-1);
      font-weight: var(--font-weight-5);
      line-height: var(--font-lineheight-4);

      color: var(--text-secondary);

      max-width: 65ch;

      a {
        color: var(--text-primary);
        padding-left: var(--gap-s);
      }
    }

    @media screen and (min-width: 1024px) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (min-width: 1024px) {
    .right {
      grid-column: 2/-1;
      grid-row: 1/2;
    }

    .left {
      grid-column: 1/2;
      grid-row: 1/2;
    }
  }
</style>

<script>
  // document.addEventListener("astro:page-load", () => {
  const image = document.querySelector(".card_image") as HTMLImageElement

  const root = document.documentElement
  const imageLight = image.dataset.light!
  const imageDark = image.dataset.dark!

  if (!!imageLight && !!imageDark) {
    changeImage()

    const observer = new MutationObserver((mutations) =>
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes") {
          changeImage()
        }
      })
    )

    observer.observe(root, { attributes: true })
  }

  function changeImage() {
    image.src = root.dataset.theme === "dark" ? imageDark : imageLight
  }
  // })
</script>
