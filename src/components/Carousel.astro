---
import { Image } from "astro:assets"

type Props = {
  title: string
  images: ImageMetadata[]
}

const { title, images } = Astro.props
---

<div>
  <ul data-slide-container transition:name={`${title}-image`}>
    {
      images.map((image, index) => (
        <li data-slide>
          <Image src={image} alt={title + index} />
        </li>
      ))
    }
  </ul>
  <button data-left>&lt;</button>
  <button data-right>&gt;</button>
</div>

<style lang="scss">
  div {
    --_width: max(55vw, 40rem);
    width: var(--_width);
    overflow: hidden;
    contain: paint;

    position: relative;

    display: grid;

    align-content: center;

    @media screen and (max-width: 1023px) {
      --_width: max(90vw, 20rem);
    }
    ul {
      display: flex;
      transition: transform 300ms;

      li {
        width: var(--_width);
        flex-wrap: nowrap;
        flex-shrink: 0;
        padding: var(--gap-xxl);

        @media screen and (max-width: 1024px) {
          padding: var(--gap-l);
        }

        img {
          border-radius: 0.25rem;

          box-shadow: var(--shadow-2);
        }
      }
    }

    button {
      --_width: var(--size-fluid-5);
      position: absolute;

      top: calc(50% - (var(--_width) / 2));
      width: var(--_width);

      color: var(--text-primary);
      font-size: var(--font-size-fluid-2);
      font-weight: 500;

      border: 1px solid var(--text-secondary);
      border-radius: 5px;

      opacity: 0.25;
      transition:
        opacity 300ms,
        scale 200ms;

      cursor: pointer;

      background-color: var(--bg);
      aspect-ratio: 1;

      &:active {
        scale: 0.95;
      }
    }

    &:hover button {
      opacity: 0.75;
    }

    button:disabled {
      opacity: 0;
      pointer-events: none;
    }
  }

  [data-left] {
    left: 0.5rem;
  }

  [data-right] {
    right: 0.5rem;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const slideContainer = document.querySelector(
      "[data-slide-container]"
    ) as HTMLUListElement
    const slides = document.querySelectorAll(
      "[data-slide]"
    ) as NodeListOf<HTMLLIElement>

    if (!slides?.length) return

    const slideWidth = slides[0].offsetWidth

    let currentSlide = 0

    const leftButton = document.querySelector(
      "[data-left]"
    ) as HTMLButtonElement
    const rightButton = document.querySelector(
      "[data-right]"
    ) as HTMLButtonElement

    leftButton.disabled = currentSlide === 0
    rightButton.disabled = currentSlide === slides.length - 1

    leftButton?.addEventListener("click", () => {
      if (currentSlide > 0) {
        --currentSlide
        slideContainer.style.transform = `translateX(-${currentSlide * slideWidth}px)`
      }
      leftButton.disabled = currentSlide === 0
      rightButton.disabled = currentSlide === slides.length - 1
    })

    rightButton?.addEventListener("click", () => {
      if (currentSlide < slides.length) {
        ++currentSlide
        slideContainer.style.transform = `translateX(-${currentSlide * slideWidth}px)`
      }
      leftButton.disabled = currentSlide === 0
      rightButton.disabled = currentSlide === slides.length - 1
    })
  })
</script>
